#!/usr/bin/env python2
# Server-side of SecureCRT's "public key assistant" subsystem.
#
# Requirements:
#
#   - lib/authorized_keys.py from the same gitrepo
#
#   - python-yaml, but only if YamlKeystore is being used.
#     (You don't need it, so just comment out "import yaml" below.
#     I'm too lazy to do it myself.)
#
# Configuring OpenSSHd:
#
#   1. Add the following to /etc/ssh/sshd_config
#
#        Subsystem publickey             /usr/local/bin/rfc4819
#        Subsystem publickey@vandyke.com /usr/local/bin/rfc4819
#
#   2. Reload `sshd`
#
# http://tools.ietf.org/html/rfc4819
# Data types: http://tools.ietf.org/html/rfc4251#section-5

from __future__ import print_function
import os, sys
import tempfile
import struct
import yaml

sys.path.append(os.path.expanduser("~/lib/python"))
import authorized_keys as authk

class Keystore(object):
	pass

class YamlKeystore(Keystore):
	def __init__(self, path=None):
		self.path = path or os.path.expanduser("~/ssh-keys.yaml")

	def read(self):
		fh = open(self.path, "r")
		data = yaml.load(fh)
		keys = {}
		for item in data:
			keys[item["algo"], item["pubkey"]] = item["attributes"]
		return keys

	def write(self, keys):
		fh = open(self.path, "w")
		fh.write("# vim: ft=yaml\n")
		data = []
		for (kalgo, kblob), attrs in keys.items():
			data.append({"algo": kalgo, "pubkey": kblob, "attributes": attrs})
		yaml.dump(data, fh)

	def add(self, kalgo, kblob, attrs):
		keys = self.read()
		keys[kalgo, kblob] = attrs
		return self.write(keys)

	def remove(self, kalgo, kblob):
		keys = self.read()
		del keys[kalgo, kblob]
		return sefl.write(keys)

	@classmethod
	def isKnownAttribute(self, attr):
		return True

class OpenSSHKeystore(Keystore):
	def __init__(self, path=None):
		self.path = path or os.path.expanduser("~/.ssh/authorized_keys")

	def read(self):
		keys = {}
		extra_attrs = []
		for line in open(self.path, "r"):
			line = line.strip()
			if line and not line.startswith("#"):
				key = authk.PublicKey(line)
				attrs = self.parseOptions(key.options)
				if len(key.comment):
					attrs.append({
						"name": "comment",
						"value": key.comment,
						"critical": False,
					})
				attrs += extra_attrs
				extra_attrs = []
				keys[key.algo, key.blob] = attrs
			elif line and line.startswith("# attribute: "):
				# hack to store attributes not supported by authorized_keys
				name, value = line[13:].split("=", 2)
				extra_attrs.append({
					"name": name,
					"value": value,
					"critical": False,
				})
			elif line and not line.startswith("#: "):
				extra_attrs.append({
					"name": "x-comment",
					"value": line[1:],
					"critical": False,
				})
		return keys

	def write(self, keys):
		fh = open(self.path, "w")
		for (kalgo, kblob), attrs in keys.items():
			self._appendKey(fh, kalgo, kblob, attrs)

	def _appendKey(self, fh, kalgo, kblob, attrs):
		key = authk.PublicKey()
		key.algo = kalgo
		key.blob = kblob
		for attr in attrs:
			if attr["name"] == "comment":
				key.comment = attr["value"]
		key.options, unsup_attrs = self.unparseOptions(attrs)
		if len(key.comment):
			fh.write("#: %s\n" % key.comment)
		fpr = ":".join("%02x" % ord(c) for c in key.fingerprint())
		print >> fh, "#: %s" % fpr
		for attr in unsup_attrs:
			if attr["name"] == "x-comment":
				print >> fh, "#%s" % attr["value"]
			else:
				print >> fh, "# attr: %(name)s=%(value)s" % attr
		print >> fh, key
		print >> fh, ""

	def add(self, kalgo, kblob, attrs):
		fh = open(self.path, "a")
		self._appendKey(fh, kalgo, kblob, attrs)
		#keys = self.read()
		#keys[kalgo, kblob] = attrs
		#return self.write(keys)

	def remove(self, kalgo, kblob):
		keys = self.read()
		del keys[kalgo, kblob]
		return sefl.write(keys)

	@staticmethod
	def parseOptions(options):
		attrs = []
		for opt, value in options:
			if opt == "command":
				attrs.append(("command-override", value))
			elif opt == "from":
				attrs.append(("from", value))
			elif opt == "no-agent-forwarding":
				attrs.append(("agent", ""))
			elif opt == "no-port-forwarding":
				attrs.append(("port-forward", ""))
				attrs.append(("reverse-forward", ""))
			elif opt == "no-x11-forwarding":
				attrs.append(("x11", ""))
			else:
				if value is True:
					xvalue = opt
				else:
					xvalue = "=".join((opt, value))
				attrs.append(("x-openssh-option", xvalue))
		# TODO:
		return [{"name": a[0], "value": a[1], "critical": False} for a in attrs]

	@staticmethod
	def unparseOptions(attrs):
		opts = authk.PublicKeyOptions()
		unknown = []
		for a in attrs:
			# TODO:
			name, value, critical = a["name"], a["value"], a["critical"]
			if name == "agent":
				opts.append(("no-agent-forwarding", True))
			elif name == "command-override":
				opts.append(("command", value))
			elif name == "comment":
				pass
			elif name == "from":
				opts.append(("from", value))
			elif name == "port-forward":
				opts.append(("no-port-forwarding", True))
			elif name == "x11":
				opts.append(("no-x11-forwarding", True))
			elif name == "x-openssh-option":
				if "=" in value:
					opts.append(value.split("=", 1))
				else:
					opts.append((value, True))
			else:
				unknown.append(a)
		return opts, unknown

	attributes = ("agent", "command-override", "comment", "from",
		"port-forward", "x11", "x-openssh-option")

	@classmethod
	def isKnownAttribute(self, name):
		return name in self.attributes

class LshKeystore(Keystore):
	def __init__(self, path=None):
		self.path = path or os.path.expanduser("~/.lsh/authorized_keys_sha1")
		#raise NotImplemented()

	def read(self):
		keys = {}
		for f in os.listdir(self.path):
			path = os.path.join(self.path, f)
			kalgo, kblob = self.parseSexp(open(path, "rb"))
			keys[kalgo, kblob] = []
		return keys

	def write(self, keys):
		import hashlib
		storedKeys = set(os.listdir(self.path))
		currentKeys = set()
		for (kalgo, kblob), attrs in keys.items():
			exp = self.unparseSexp(kalgo, kblob, attrs)
			sha = hashlib.sha1(exp.canonical()).hexdigest()
			currentKeys.add(sha)
			if sha not in storedKeys:
				path = os.path.join(self.path, sha)
				open(path, "wb").write(exp.sexp())

		for sha in storedKeys-currentKeys:
			path = os.path.join(self.path, sha)
			os.unlink(path)

	def add(self, kalgo, kblob, attrs):
		import hashlib
		exp = self.unparseSexp(kalgo, kblob, attrs)
		sha = hashlib.sha1(exp.canonical()).hexdigest()
		path = os.path.join(self.path, sha)
		if os.path.exists(path):
			return vdproto.KEY_ALREADY_PRESENT
		else:
			open(path, "wb").write(exp.sexp())
			return vdproto.SUCCESS

	def remove(self, kalgo, kblob):
		raise NotImplemented

	@classmethod
	def parseSexp(self, expr):
		import sexp
		tree = sexp.Sexp(expr).tree
		assert tree[0] == "public-key"
		tree = tree[1]
		algo = tree[0]
		if algo == "rsa-pkcs1-sha1":
			kalgo = "ssh-rsa"
			n = tree.find("n").next()[1]
			e = tree.find("e").next()[1]
			# todo: SshProtocol class?
			string = lambda s: struct.pack("!L", len(s)) + s
			kblob = string("ssh-rsa") + string(e) + string(n)
		else:
			raise NotImplemented("unknown key type %s" % algo)
		return kalgo, kblob

	@classmethod
	def unparseSexp(self, kalgo, kblob, attrs):
		import sexp
		from StringIO import StringIO
		buf = StringIO(kblob)
		if kalgo == "ssh-rsa":
			# TODO
			length, = struct.unpack("!L", buf.read(4))
			buf.read(length)
			length, = struct.unpack("!L", buf.read(4))
			e = buf.read(length)
			length, = struct.unpack("!L", buf.read(4))
			n = buf.read(length)

			key = sexp.List()
			key.append(sexp.String("rsa-pkcs1-sha1"))
			key.append(sexp.List([sexp.String("n"), sexp.String(n)]))
			key.append(sexp.List([sexp.String("e"), sexp.String(e)]))

		else:
			raise NotImplemented("keys of type %s not supported yet" % kalgo)

		exp = sexp.List()
		exp.append(sexp.String("public-key"))
		exp.append(key)
		return exp

	@classmethod
	def isKnownAttribute(self, name):
		return name in ("comment")

class sshproto():
	@classmethod
	def read_uint32(self):
		buf = sys.stdin.read(4)
		if not buf:
			raise IOError
		num, = struct.unpack("!L", buf)
		return num

	@classmethod
	def read_bool(self):
		buf = sys.stdin.read(1)
		if not buf:
			raise IOError
		val, = struct.unpack("!?", buf)
		return val

	@classmethod
	def read_string(self):
		buf = sys.stdin.read(4)
		if not buf:
			raise IOError
		length, = struct.unpack("!L", buf)
		buf = sys.stdin.read(length)
		return buf

	@classmethod
	def read_packet(self):
		length = self.read_uint32()
		name = self.read_string()
		datalen = length-(4+len(name))
		return name, datalen

	@classmethod
	def send_packet(self, *data):
		fmt = "!L"
		outdata = []
		for d in data:
			if isinstance(d, int):
				fmt += "L"
				outdata += [d]
			elif isinstance(d, bool):
				fmt += "?"
				outdata += [d]
			elif isinstance(d, str):
				fmt += "L%ds" % len(d)
				outdata += [len(d), d]
		length = struct.calcsize(fmt)-4
		log("out: %s data[%d]" % (repr(data[0]), length))
		buf = struct.pack(fmt, length, *outdata)
		sys.stdout.write(buf)
		sys.stdout.flush()

	@classmethod
	def send_status(self, code):
		msg = vdproto.statuses.get(code, vdproto.GENERAL_FAILURE)
		self.send_packet("status", code, msg, "en_US")

class vdproto():
	SUCCESS			= 0
	ACCESS_DENIED		= 1
	STORAGE_EXCEEDED	= 2
	VERSION_NOT_SUPPORTED	= 3
	KEY_NOT_FOUND		= 4
	KEY_NOT_SUPPORTED	= 5
	KEY_ALREADY_PRESENT	= 6
	GENERAL_FAILURE		= 7
	REQUEST_NOT_SUPPORTED	= 8
	ATTRIBUTE_NOT_SUPPORTED	= 9

	statuses = {
		SUCCESS:			"Success",
		ACCESS_DENIED:			"Access denied",
		VERSION_NOT_SUPPORTED:		"Protocol version not supported",
		KEY_NOT_FOUND:			"Key not found",
		KEY_NOT_SUPPORTED:		"Key type not supported",
		KEY_ALREADY_PRESENT:		"Key already present",
		GENERAL_FAILURE:		"General failure",
		REQUEST_NOT_SUPPORTED:		"Request not supported",
		ATTRIBUTE_NOT_SUPPORTED:	"Attribute not supported",
	}

	@staticmethod
	def list():
		global keys
		for kalgo, kblob, attrs in key_list():
			data = [kalgo, kblob, len(attrs)]
			for attr in attrs:
				data += attr["name"], attr["value"]
			sshproto.send_packet("publickey", *data)
		return self.SUCCESS

	@staticmethod
	def add():
		global keys
		kalgo = sshproto.read_string()
		kblob = sshproto.read_string()
		overwrite = sshproto.read_bool()
		num_attrs = sshproto.read_uint32()
		attrs = []
		while num_attrs:
			attrs.append({
				"name": sshproto.read_string(),
				"value": sshproto.read_string(),
				"critical": sshproto.read_bool(),
			})
			num_attrs -= 1
		return key_add(kalgo, kblob, attrs, overwrite)

	@staticmethod
	def remove():
		kalgo = read_string()
		kblob = read_string()
		return key_remove(kalgo, kblob)

	@staticmethod
	def listattributes():
		for a in KnownAttributes:
			sshproto.send_packet("attribute", a, False)
		return self.SUCCESS

def save_keys():
	return keystore.write(keys)

def load_keys():
	return keystore.read()

def key_list():
	global keys
	for (kalgo, kblob), attrs in keys.items():
		yield kalgo, kblob, attrs

def key_add(kalgo, kblob, attrs, overwrite=True):
	global keys
	if (kalgo, kblob) in keys and not overwrite:
		return vdproto.KEY_ALREADY_PRESENT
	for attr in attrs:
		if attr["critical"] and not keystore.isKnownAttribute(attr["name"]):
			return vdproto.ATTRIBUTE_NOT_SUPPORTED
	keys[kalgo, kblob] = attrs
	return vdproto.SUCCESS

def key_remove(kalgo, kblob):
	global keys
	if (kalgo, kblob) in keys:
		del keys[kalgo, kblob]
		return vdproto.SUCCESS
	else:
		return vdproto.KEY_NOT_FOUND

def log(text):
	print(text, file=sys.stderr)
	sys.stderr.flush()
def is_interactive():
	try:
		return os.isatty(sys.stdin.fileno())
	except AttributeError:
		return false

if is_interactive():
	print("This tool is intended to be run as a SSH subsystem, not in interactive session.",
		file=sys.stderr)
	sys.exit(2)

log_file = tempfile.NamedTemporaryFile(
	mode="w", prefix="publickey", suffix=".log", delete=False)
sys.stderr = log_file

keystore = OpenSSHKeystore()
#keystore = LshKeystore()
#keystore = YamlKeystore()

keys = load_keys()

try:
	while True:
		name, datalen = read_packet()
		log("in: %s data[%d]" % (repr(name), datalen))
		if name == "version":
			ver = read_uint32()
			log("version = %d" % ver)
			if ver == 2:
				sshproto.send_packet("version", 2)
			else:
				sshproto.send_status(vdproto.VERSION_NOT_SUPPORTED)
				sys.exit()
		elif name == "list":
			sshproto.send_status(vdproto.list())
			pass
		elif name == "add":
			sshproto.send_status(vdproto.add())
		elif name == "remove":
			sshproto.send_status(vdproto.remove())
		elif name == "listattributes":
			sshproto.send_status(vdproto.listattributes())
		else:
			log("discarding %d" % datalen)
			sys.stdin.read(datalen)
			sshproto.send_status(vdproto.REQUEST_NOT_SUPPORTED)
except IOError:
	save_keys()
	log_file.delete = True
	sys.exit()
